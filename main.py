import os
import telebot
from telebot import types
import re
import sqlite3
import datetime
import time
from threading import Lock
from flask import Flask
import threading

TOKEN = os.getenv('TELEGRAM_TOKEN', '8479919737:AAEYofffz9W5--UssgdS5lFN9Y9NkxdidSw')
SUPPORT_CHAT_ID = int(os.getenv('SUPPORT_CHAT_ID', '-1002783988320'))
ADMIN_IDS = [int(x) for x in os.getenv('ADMIN_IDS', '8051825625,1221002491').split(',')]

bot = telebot.TeleBot(TOKEN)

# –•—Ä–∞–Ω–∏–º —Å–≤—è–∑—å —Å–æ–æ–±—â–µ–Ω–∏–π
message_to_user = {}

# CD —Å–∏—Å—Ç–µ–º–∞
user_cooldowns = {}
cooldown_lock = Lock()
BUTTON_COOLDOWN = 3

# AFK —Å–∏—Å—Ç–µ–º–∞
admin_afk_status = {}

def check_cooldown(user_id):
    with cooldown_lock:
        current_time = time.time()
        if user_id in user_cooldowns:
            if current_time - user_cooldowns[user_id] < BUTTON_COOLDOWN:
                return False
        user_cooldowns[user_id] = current_time
        return True

# –ë–ê–ó–ê –î–ê–ù–ù–´–•
def init_db():
    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS stats
                 (date TEXT, user_id INTEGER, messages INTEGER, type TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, username TEXT, first_name TEXT, 
                  last_name TEXT, registered_date TEXT, last_activity TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS bans
                 (user_id INTEGER PRIMARY KEY, username TEXT, first_name TEXT,
                  banned_by INTEGER, ban_reason TEXT, ban_date TEXT)''')
    conn.commit()
    conn.close()

init_db()

def is_banned(user_id):
    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    c.execute('SELECT * FROM bans WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    conn.close()
    return result is not None

def ban_user(user_id, banned_by, reason="–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"):
    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    c.execute('SELECT username, first_name FROM users WHERE user_id = ?', (user_id,))
    user_info = c.fetchone()
    username = user_info[0] if user_info else ""
    first_name = user_info[1] if user_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    c.execute('''INSERT OR REPLACE INTO bans 
                 (user_id, username, first_name, banned_by, ban_reason, ban_date)
                 VALUES (?, ?, ?, ?, ?, ?)''',
              (user_id, username, first_name, banned_by, reason, datetime.datetime.now().isoformat()))
    conn.commit()
    conn.close()
    return True

def unban_user(user_id):
    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    c.execute('DELETE FROM bans WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()
    return True

def get_banned_users():
    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    c.execute('SELECT * FROM bans ORDER BY ban_date DESC')
    banned_users = c.fetchall()
    conn.close()
    return banned_users

def save_message_stat(user_id, message_type="message"):
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    c.execute('''INSERT OR REPLACE INTO stats (date, user_id, messages, type)
                 VALUES (?, ?, COALESCE((SELECT messages FROM stats WHERE date=? AND user_id=? AND type=?), 0) + 1, ?)''',
              (today, user_id, today, user_id, message_type, message_type))
    c.execute('''INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, registered_date, last_activity)
                 VALUES (?, ?, ?, ?, ?, ?)''',
              (user_id, "", "", "", today, datetime.datetime.now().isoformat()))
    conn.commit()
    conn.close()

def get_daily_stats():
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    c.execute('''SELECT COUNT(DISTINCT user_id) FROM stats WHERE date = ?''', (today,))
    daily_users = c.fetchone()[0]
    c.execute('''SELECT COUNT(*) FROM stats WHERE date = ?''', (today,))
    daily_messages = c.fetchone()[0]
    month_start = datetime.datetime.now().replace(day=1).strftime("%Y-%m-%d")
    c.execute('''SELECT COUNT(DISTINCT user_id) FROM stats WHERE date >= ?''', (month_start,))
    monthly_users = c.fetchone()[0]
    c.execute('''SELECT COUNT(*) FROM stats WHERE date >= ?''', (month_start,))
    monthly_messages = c.fetchone()[0]
    c.execute('''SELECT COUNT(*) FROM users''')
    total_users = c.fetchone()[0]
    c.execute('''SELECT COUNT(*) FROM bans''')
    banned_users = c.fetchone()[0]
    conn.close()
    return {
        'daily_users': daily_users,
        'daily_messages': daily_messages,
        'monthly_users': monthly_users,
        'monthly_messages': monthly_messages,
        'total_users': total_users,
        'banned_users': banned_users
    }

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    
    if is_banned(user_id):
        bot.send_message(user_id, "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    save_message_stat(user_id, "start")
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üÜò –ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
    btn2 = types.KeyboardButton('üí¨ –Ø —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å') 
    btn3 = types.KeyboardButton('üì¢ –ù–∞—à –∫–∞–Ω–∞–ª')
    btn4 = types.KeyboardButton('‚≠ê –ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã')
    
    if user_id in ADMIN_IDS:
        btn5 = types.KeyboardButton('üëë –ê–¥–º–∏–Ω –º–µ–Ω—é')
        markup.add(btn1, btn2, btn3, btn4, btn5)
    else:
        markup.add(btn1, btn2, btn3, btn4)
    
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)

# –ê–î–ú–ò–ù –ú–ï–ù–Æ
@bot.message_handler(func=lambda m: m.text == 'üëë –ê–¥–º–∏–Ω –º–µ–Ω—é' and m.from_user.id in ADMIN_IDS)
def admin_menu(message):
    if not check_cooldown(message.from_user.id):
        bot.send_message(message.chat.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º")
        return
        
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    btn2 = types.KeyboardButton('üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
    btn3 = types.KeyboardButton('üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    btn4 = types.KeyboardButton('üî® –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    btn5 = types.KeyboardButton('üîì –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    btn6 = types.KeyboardButton('üìã –°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤')
    btn7 = types.KeyboardButton('‚è∏Ô∏è AFK —Å–∏—Å—Ç–µ–º–∞')
    btn8 = types.KeyboardButton('üîô –ù–∞–∑–∞–¥')
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8)
    
    bot.send_message(message.chat.id, "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)

# AFK –°–ò–°–¢–ï–ú–ê - –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
@bot.message_handler(func=lambda m: m.text == '‚è∏Ô∏è AFK —Å–∏—Å—Ç–µ–º–∞' and m.from_user.id in ADMIN_IDS)
def afk_system_menu(message):
    if not check_cooldown(message.from_user.id):
        bot.send_message(message.chat.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º")
        return
        
    admin_id = message.from_user.id
    current_afk = admin_afk_status.get(admin_id)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    if current_afk:
        btn1 = types.KeyboardButton('üü¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–µ—Ç—å')
        btn2 = types.KeyboardButton('üöÄ –ë—ã—Å—Ç—Ä—ã–π AFK')
        btn3 = types.KeyboardButton('üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É')
        markup.add(btn1, btn2, btn3)
        
        status_text = f"‚è∏Ô∏è **–¢–≤–æ–π AFK —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–µ–Ω:**\n\n`{current_afk}`"
    else:
        btn1 = types.KeyboardButton('üöÄ –ë—ã—Å—Ç—Ä—ã–π AFK')
        btn2 = types.KeyboardButton('üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É')
        markup.add(btn1, btn2)
        
        status_text = "‚è∏Ô∏è **AFK —Å–∏—Å—Ç–µ–º–∞**\n\n–¢—ã —Å–µ–π—á–∞—Å –≤ —Å–µ—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ AFK —Å—Ç–∞—Ç—É—Å–∞."
    
    bot.send_message(message.chat.id, status_text, reply_markup=markup, parse_mode='Markdown')

# –ë–´–°–¢–†–´–ô AFK
@bot.message_handler(func=lambda m: m.text == 'üöÄ –ë—ã—Å—Ç—Ä—ã–π AFK' and m.from_user.id in ADMIN_IDS)
def quick_afk_menu(message):
    if not check_cooldown(message.from_user.id):
        bot.send_message(message.chat.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º")
        return
        
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    btn1 = types.KeyboardButton('‚è∏Ô∏è üíß –ù–µ –≤ —Å–µ—Ç–∏')
    btn2 = types.KeyboardButton('‚è∏Ô∏è üîß –ê–¥–º–∏–Ω —Å–ø–∏—Ç')
    btn3 = types.KeyboardButton('‚è∏Ô∏è üíº –ù–∞ —Ä–∞–±–æ—Ç–µ')
    btn4 = types.KeyboardButton('‚è∏Ô∏è üò¥ –°–ø–∏—Ç')
    btn5 = types.KeyboardButton('‚úèÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç')
    btn6 = types.KeyboardButton('üîô –ù–∞–∑–∞–¥ –≤ AFK')
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    
    help_text = "üöÄ **–ë—ã—Å—Ç—Ä—ã–π AFK**\n\n–í—ã–±–µ—Ä–∏ –≥–æ—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π —Å–≤–æ–π:"
    
    bot.send_message(message.chat.id, help_text, reply_markup=markup, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö AFK –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
@bot.message_handler(func=lambda m: m.text.startswith('‚è∏Ô∏è ') and m.from_user.id in ADMIN_IDS)
def handle_quick_afk(message):
    if not check_cooldown(message.from_user.id):
        bot.send_message(message.chat.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º")
        return
        
    admin_id = message.from_user.id
    admin_name = message.from_user.first_name
    
    quick_afk_map = {
        '‚è∏Ô∏è üíß –ù–µ –≤ —Å–µ—Ç–∏': '#–∫–∞–ø–ª—è–∫—Ä–æ–≤–∏ —Å–µ–π—á–∞—Å –Ω–µ –≤ —Å–µ—Ç–∏',
        '‚è∏Ô∏è üîß –ê–¥–º–∏–Ω —Å–ø–∏—Ç': '#–ª–∏—Ç–µ–ª—Å –≤–∞—à –∞–¥–º–∏–Ω —Å–ø–∏—Ç', 
        '‚è∏Ô∏è üíº –ù–∞ —Ä–∞–±–æ—Ç–µ': '#—Ä–∞–±–æ—Ç–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ, –æ—Ç–≤–µ—á—É –ø–æ–∑–∂–µ',
        '‚è∏Ô∏è üò¥ –°–ø–∏—Ç': '#—Å–æ–Ω —Å–ø–∏—Ç, –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å'
    }
    
    afk_message = quick_afk_map.get(message.text)
    if afk_message:
        admin_afk_status[admin_id] = afk_message
        
        for admin in ADMIN_IDS:
            if admin != admin_id:
                try:
                    bot.send_message(admin, f"‚è∏Ô∏è {admin_name} —Ç–µ–ø–µ—Ä—å AFK:\n`{afk_message}`", parse_mode='Markdown')
                except:
                    pass
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ **AFK —Å—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!**\n\n`{afk_message}`",
            parse_mode='Markdown'
        )
        afk_system_menu(message)

# –°–û–ë–°–¢–í–ï–ù–ù–´–ô –í–ê–†–ò–ê–ù–¢
@bot.message_handler(func=lambda m: m.text == '‚úèÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç' and m.from_user.id in ADMIN_IDS)
def custom_afk(message):
    if not check_cooldown(message.from_user.id):
        bot.send_message(message.chat.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º")
        return
        
    msg = bot.send_message(
        message.chat.id,
        "‚úèÔ∏è **–í–≤–µ–¥–∏ —Å–≤–æ–π AFK —Å—Ç–∞—Ç—É—Å:**\n\n"
        "–§–æ—Ä–º–∞—Ç: `#—Ç–µ–≥ —Å–æ–æ–±—â–µ–Ω–∏–µ`\n\n"
        "**–ü—Ä–∏–º–µ—Ä:**\n"
        "`#–∫–∞–ø–ª—è–∫—Ä–æ–≤–∏ —Å–µ–π—á–∞—Å –Ω–µ –≤ —Å–µ—Ç–∏`\n"
        "`#–ª–∏—Ç–µ–ª—Å –≤–∞—à –∞–¥–º–∏–Ω —Å–ø–∏—Ç`\n"
        "`#—Å–æ–Ω –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å –¥–æ –∑–∞–≤—Ç—Ä–∞`",
        parse_mode='Markdown',
        reply_markup=types.ReplyKeyboardRemove()
    )
    bot.register_next_step_handler(msg, process_custom_afk)

def process_custom_afk(message):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        return quick_afk_menu(message)
    
    afk_text = message.text.strip()
    admin_id = message.from_user.id
    admin_name = message.from_user.first_name
    
    admin_afk_status[admin_id] = afk_text
    
    for admin in ADMIN_IDS:
        if admin != admin_id:
            try:
                bot.send_message(admin, f"‚è∏Ô∏è {admin_name} —Ç–µ–ø–µ—Ä—å AFK:\n`{afk_text}`", parse_mode='Markdown')
            except:
                pass
    
    bot.send_message(
        message.chat.id,
        f"‚úÖ **AFK —Å—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!**\n\n`{afk_text}`",
        parse_mode='Markdown'
    )
    afk_system_menu(message)

# –í–û–ó–í–†–ê–¢ –í –°–ï–¢–¨
@bot.message_handler(func=lambda m: m.text == 'üü¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–µ—Ç—å' and m.from_user.id in ADMIN_IDS)
def return_online(message):
    if not check_cooldown(message.from_user.id):
        bot.send_message(message.chat.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º")
        return
        
    admin_id = message.from_user.id
    admin_name = message.from_user.first_name
    
    if admin_id in admin_afk_status:
        del admin_afk_status[admin_id]
    
    for admin in ADMIN_IDS:
        if admin != admin_id:
            try:
                bot.send_message(admin, f"üü¢ {admin_name} –≤–µ—Ä–Ω—É–ª—Å—è –≤ —Å–µ—Ç—å!")
            except:
                pass
    
    bot.send_message(message.chat.id, "üü¢ –¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ —Å–µ—Ç—å!")
    afk_system_menu(message)

# –ù–ê–ó–ê–î –í –ê–î–ú–ò–ù–ö–£
@bot.message_handler(func=lambda m: m.text == 'üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É' and m.from_user.id in ADMIN_IDS)
def back_to_admin_from_afk(message):
    admin_menu(message)

@bot.message_handler(func=lambda m: m.text == 'üîô –ù–∞–∑–∞–¥ –≤ AFK' and m.from_user.id in ADMIN_IDS)
def back_to_afk_from_quick(message):
    afk_system_menu(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /afk
@bot.message_handler(commands=['afk'])
def afk_command(message):
    if message.from_user.id not in ADMIN_IDS:
        return
        
    if len(message.text.split()) < 2:
        bot.send_message(
            message.chat.id,
            "‚è∏Ô∏è **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n`/afk #—Ç–µ–≥ —Å–æ–æ–±—â–µ–Ω–∏–µ`\n\n"
            "**–ü—Ä–∏–º–µ—Ä:**\n`/afk #–∫–∞–ø–ª—è–∫—Ä–æ–≤–∏ —Å–µ–π—á–∞—Å –Ω–µ –≤ —Å–µ—Ç–∏`\n"
            "`/afk #–ª–∏—Ç–µ–ª—Å –≤–∞—à –∞–¥–º–∏–Ω —Å–ø–∏—Ç`",
            parse_mode='Markdown'
        )
        return
        
    afk_text = message.text[5:].strip()
    admin_id = message.from_user.id
    admin_name = message.from_user.first_name
    
    admin_afk_status[admin_id] = afk_text
    
    for admin in ADMIN_IDS:
        if admin != admin_id:
            try:
                bot.send_message(admin, f"‚è∏Ô∏è {admin_name} —Ç–µ–ø–µ—Ä—å AFK:\n`{afk_text}`", parse_mode='Markdown')
            except:
                pass
    
    bot.send_message(
        message.chat.id,
        f"‚è∏Ô∏è **AFK —Å—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!**\n\n`{afk_text}`",
        parse_mode='Markdown'
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ AFK —Å—Ç–∞—Ç—É—Å–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏
def check_afk_mentions(text):
    afk_responses = []
    
    for admin_id, afk_status in admin_afk_status.items():
        afk_tags = re.findall(r'#\w+', afk_status)
        for tag in afk_tags:
            if tag.lower() in text.lower():
                admin_name = "–ê–¥–º–∏–Ω"
                afk_responses.append(f"‚è∏Ô∏è {admin_name} —Å–µ–π—á–∞—Å –Ω–µ –≤ —Å–µ—Ç–∏: {afk_status}")
                break
    
    return afk_responses

@bot.message_handler(func=lambda m: m.from_user.id in ADMIN_IDS and m.text in ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'üìã –°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤'])
def handle_admin_commands(message):
    if not check_cooldown(message.from_user.id):
        bot.send_message(message.chat.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º")
        return
        
    if message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        stats = get_daily_stats()
        stat_text = f"""
üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**

üìÖ **–ó–ê –°–ï–ì–û–î–ù–Ø:**
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['daily_users']}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['daily_messages']}

üìÖ **–ó–ê –ú–ï–°–Ø–¶:**
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['monthly_users']}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['monthly_messages']}

üë• **–í–°–ï–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:** {stats['total_users']}
üî® **–ó–ê–ë–ê–ù–ï–ù–û:** {stats['banned_users']}
        """
        bot.send_message(message.chat.id, stat_text, parse_mode='Markdown')
    
    elif message.text == 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
        conn = sqlite3.connect('bot_stats.db')
        c = conn.cursor()
        c.execute('''SELECT user_id, first_name, username, registered_date 
                     FROM users ORDER BY registered_date DESC LIMIT 10''')
        users = c.fetchall()
        conn.close()
        
        users_text = "üë• **–ü–û–°–õ–ï–î–ù–ò–ï 10 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:**\n\n"
        for user in users:
            user_id, first_name, username, reg_date = user
            username = f"@{username}" if username else "–Ω–µ—Ç username"
            users_text += f"üë§ {first_name} ({username})\nüÜî ID: {user_id}\nüìÖ {reg_date}\n\n"
        
        bot.send_message(message.chat.id, users_text, parse_mode='Markdown')
    
    elif message.text == 'üìã –°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤':
        banned_users = get_banned_users()
        
        if not banned_users:
            bot.send_message(message.chat.id, "üìù –°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤ –ø—É—Å—Ç.")
            return
        
        ban_text = "üî® **–ó–ê–ë–ê–ù–ï–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:**\n\n"
        
        for ban in banned_users:
            user_id, username, first_name, banned_by, reason, ban_date = ban
            username = f"@{username}" if username else "–Ω–µ—Ç username"
            ban_date = datetime.datetime.fromisoformat(ban_date).strftime("%d.%m.%Y %H:%M")
            ban_text += f"üë§ {first_name} ({username})\nüÜî ID: {user_id}\nüìÖ {ban_date}\nüìù {reason}\n\n"
        
        bot.send_message(message.chat.id, ban_text, parse_mode='Markdown')

@bot.message_handler(func=lambda m: m.from_user.id in ADMIN_IDS and m.text == 'üî® –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
def ban_user_start(message):
    if not check_cooldown(message.from_user.id):
        bot.send_message(message.chat.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º")
        return
        
    msg = bot.send_message(message.chat.id, "üî® –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:")
    bot.register_next_step_handler(msg, process_ban_user_id)

def process_ban_user_id(message):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        return admin_menu(message)
    
    try:
        user_id = int(message.text.strip())
        
        if user_id in ADMIN_IDS:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return admin_menu(message)
        
        if is_banned(user_id):
            bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω!")
            return admin_menu(message)
        
        msg = bot.send_message(message.chat.id, f"üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\nüìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞:")
        bot.register_next_step_handler(msg, process_ban_reason, user_id)
        
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        admin_menu(message)

def process_ban_reason(message, user_id):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        return admin_menu(message)
    
    reason = message.text.strip()
    
    if ban_user(user_id, message.from_user.id, reason):
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω!\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        try:
            bot.send_message(user_id, f"‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –±–æ—Ç–µ!\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        except:
            pass
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    admin_menu(message)

@bot.message_handler(func=lambda m: m.from_user.id in ADMIN_IDS and m.text == 'üîì –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
def unban_user_start(message):
    if not check_cooldown(message.from_user.id):
        bot.send_message(message.chat.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º")
        return
        
    msg = bot.send_message(message.chat.id, "üîì –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:")
    bot.register_next_step_handler(msg, process_unban_user)

def process_unban_user(message):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        return admin_menu(message)
    
    try:
        user_id = int(message.text.strip())
        
        if not is_banned(user_id):
            bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω!")
            return admin_menu(message)
        
        if unban_user(user_id):
            bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω!")
            try:
                bot.send_message(user_id, "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã –≤ –±–æ—Ç–µ!")
            except:
                pass
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        admin_menu(message)
            
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        admin_menu(message)

@bot.message_handler(func=lambda m: m.from_user.id in ADMIN_IDS and m.text == 'üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
def start_broadcast(message):
    if not check_cooldown(message.from_user.id):
        bot.send_message(message.chat.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º")
        return
        
    msg = bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    bot.register_next_step_handler(msg, process_broadcast_message)

def process_broadcast_message(message):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        return admin_menu(message)
    
    broadcast_text = message.text
    msg = bot.send_message(message.chat.id, f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...\n\n–¢–µ–∫—Å—Ç: {broadcast_text}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '‚úÖ' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '‚ùå' –¥–ª—è –æ—Ç–º–µ–Ω—ã:")
    bot.register_next_step_handler(msg, confirm_broadcast, broadcast_text)

def confirm_broadcast(message, broadcast_text):
    if message.text == '‚úÖ':
        bot.send_message(message.chat.id, "üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        send_broadcast(message.from_user.id, broadcast_text)
    else:
        bot.send_message(message.chat.id, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        admin_menu(message)

def send_broadcast(admin_id, text):
    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    c.execute('SELECT user_id FROM users')
    users = c.fetchall()
    conn.close()
    
    success = 0
    failed = 0
    total = len(users)
    
    progress_msg = bot.send_message(admin_id, f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0/{total}")
    
    for i, user in enumerate(users):
        if is_banned(user[0]):
            continue
            
        try:
            bot.send_message(user[0], f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n\n{text}")
            success += 1
            time.sleep(0.1)
        except:
            failed += 1
        
        if i % 10 == 0:
            try:
                bot.edit_message_text(
                    chat_id=admin_id,
                    message_id=progress_msg.message_id,
                    text=f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i+1}/{total}\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {failed}"
                )
            except:
                pass
    
    bot.edit_message_text(
        chat_id=admin_id,
        message_id=progress_msg.message_id,
        text=f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}"
    )
    admin_menu(bot.send_message(admin_id, "–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é..."))

@bot.message_handler(func=lambda m: m.text == 'üîô –ù–∞–∑–∞–¥')
def back_to_main(message):
    if not check_cooldown(message.from_user.id):
        bot.send_message(message.chat.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º")
        return
    start(message)

# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê –° CD
@bot.message_handler(func=lambda m: m.text in ['üÜò –ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'üí¨ –Ø —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å'])
def start_chat(message):
    if not check_cooldown(message.from_user.id):
        bot.send_message(message.chat.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º")
        return
        
    user_id = message.from_user.id
    
    if is_banned(user_id):
        bot.send_message(user_id, "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    user_name = message.from_user.first_name
    
    if message.text == 'üÜò –ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞':
        bot.send_message(user_id, "üí¨ –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞—á–∞—Ç! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...")
        save_message_stat(user_id, "support_request")
        
        msg = bot.send_message(
            SUPPORT_CHAT_ID,
            f"üÜò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–£–ñ–î–ê–ï–¢–°–Ø –í –ü–û–î–î–ï–†–ñ–ö–ï!\n"
            f"üë§ –ò–º—è: {user_name}\n"
            f"üÜî ID: {user_id}\n"
            f"‚úâÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            f"üí¨ –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ //—Ç–µ–∫—Å—Ç"
        )
        message_to_user[msg.message_id] = user_id
        
    else:
        bot.send_message(user_id, "üí¨ –†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è –Ω–∞—á–∞—Ç! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...")
        save_message_stat(user_id, "chat_request")
        
        msg = bot.send_message(
            SUPPORT_CHAT_ID,
            f"üí¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –•–û–ß–ï–¢ –ü–û–ë–û–õ–¢–ê–¢–¨!\n"
            f"üë§ –ò–º—è: {user_name}\n"
            f"üÜî ID: {user_id}\n"
            f"‚úâÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            f"üí¨ –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ //—Ç–µ–∫—Å—Ç"
        )
        message_to_user[msg.message_id] = user_id

@bot.message_handler(func=lambda m: m.text == 'üì¢ –ù–∞—à –∫–∞–Ω–∞–ª')
def channel(message):
    if not check_cooldown(message.from_user.id):
        bot.send_message(message.chat.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º")
        return
        
    user_id = message.from_user.id
    if is_banned(user_id):
        return
    save_message_stat(user_id, "channel_click")
    bot.send_message(message.chat.id, "üì¢ https://t.me/kaplyakrovi_tgk")

@bot.message_handler(func=lambda m: m.text == '‚≠ê –ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã')
def reviews(message):
    if not check_cooldown(message.from_user.id):
        bot.send_message(message.chat.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º")
        return
        
    user_id = message.from_user.id
    if is_banned(user_id):
        return
    save_message_stat(user_id, "reviews_click")
    bot.send_message(message.chat.id, "‚≠ê https://t.me/otziv_kaplyakrovi")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
@bot.message_handler(content_types=['photo', 'sticker', 'voice', 'audio', 'document', 'video'])
def handle_media(message):
    user_id = message.from_user.id
    
    if is_banned(user_id):
        return
    
    user_name = message.from_user.first_name
    content_type = message.content_type
    
    save_message_stat(user_id, content_type)
    
    type_texts = {
        'photo': 'üì∑ —Ñ–æ—Ç–æ',
        'sticker': 'üé≠ —Å—Ç–∏–∫–µ—Ä', 
        'voice': 'üé§ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        'audio': 'üéµ –º—É–∑—ã–∫—É',
        'document': 'üìé –¥–æ–∫—É–º–µ–Ω—Ç',
        'video': 'üé• –≤–∏–¥–µ–æ'
    }
    
    type_text = type_texts.get(content_type, '–º–µ–¥–∏–∞')
    
    caption = f"üì§ {user_name} (ID:{user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª {type_text}"
    if message.caption:
        caption += f"\n\n–ü–æ–¥–ø–∏—Å—å: {message.caption}"
    
    try:
        if content_type == 'photo':
            msg = bot.send_photo(SUPPORT_CHAT_ID, message.photo[-1].file_id, 
                               caption=caption + "\n\n‚úâÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\nüí¨ –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ //—Ç–µ–∫—Å—Ç")
        elif content_type == 'sticker':
            msg = bot.send_message(SUPPORT_CHAT_ID, 
                                 f"{caption}\n\n‚úâÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\nüí¨ –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ //—Ç–µ–∫—Å—Ç")
            bot.send_sticker(SUPPORT_CHAT_ID, message.sticker.file_id)
        elif content_type == 'voice':
            msg = bot.send_voice(SUPPORT_CHAT_ID, message.voice.file_id, 
                               caption=caption + "\n\n‚úâÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\nüí¨ –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ //—Ç–µ–∫—Å—Ç")
        elif content_type == 'audio':
            msg = bot.send_audio(SUPPORT_CHAT_ID, message.audio.file_id, 
                               caption=caption + "\n\n‚úâÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\nüí¨ –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ //—Ç–µ–∫—Å—Ç")
        elif content_type == 'document':
            msg = bot.send_document(SUPPORT_CHAT_ID, message.document.file_id, 
                                  caption=caption + "\n\n‚úâÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\nüí¨ –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ //—Ç–µ–∫—Å—Ç")
        elif content_type == 'video':
            msg = bot.send_video(SUPPORT_CHAT_ID, message.video.file_id, 
                               caption=caption + "\n\n‚úâÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\nüí¨ –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ //—Ç–µ–∫—Å—Ç")
        
        message_to_user[msg.message_id] = user_id
        bot.send_message(user_id, f"‚úÖ {type_text.capitalize()} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {type_text}")
        print(f"Media error: {e}")

# –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(func=lambda m: m.chat.type == 'private' and m.text and m.text not in ['üÜò –ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'üí¨ –Ø —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å', 'üì¢ –ù–∞—à –∫–∞–Ω–∞–ª', '‚≠ê –ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã', 'üëë –ê–¥–º–∏–Ω –º–µ–Ω—é', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'üî® –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'üîì –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'üìã –°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤', 'üîô –ù–∞–∑–∞–¥', '‚è∏Ô∏è AFK —Å–∏—Å—Ç–µ–º–∞', 'üöÄ –ë—ã—Å—Ç—Ä—ã–π AFK', '‚è∏Ô∏è üíß –ù–µ –≤ —Å–µ—Ç–∏', '‚è∏Ô∏è üîß –ê–¥–º–∏–Ω —Å–ø–∏—Ç', '‚è∏Ô∏è üíº –ù–∞ —Ä–∞–±–æ—Ç–µ', '‚è∏Ô∏è üò¥ –°–ø–∏—Ç', '‚úèÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç', 'üîô –ù–∞–∑–∞–¥ –≤ AFK', 'üü¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–µ—Ç—å', 'üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É'])
def forward_message(message):
    user_id = message.from_user.id
    
    if is_banned(user_id):
        return
    
    save_message_stat(user_id, "message")
    user_name = message.from_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º AFK —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    afk_responses = check_afk_mentions(message.text)
    
    msg = bot.send_message(
        SUPPORT_CHAT_ID,
        f"üí¨ {user_name} (ID:{user_id}):\n{message.text}\n\n‚úâÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\nüí¨ –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ //—Ç–µ–∫—Å—Ç"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AFK —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    for afk_response in afk_responses:
        bot.send_message(SUPPORT_CHAT_ID, afk_response)
    
    message_to_user[msg.message_id] = user_id

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏–∑ –≥—Ä—É–ø–ø—ã (–≤–∫–ª—é—á–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
@bot.message_handler(func=lambda m: m.chat.id == SUPPORT_CHAT_ID and m.reply_to_message)
def handle_reply(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å //) –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
        if message.text and message.text.startswith('//'):
            # –≠—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
            comment_text = message.text[2:].strip()
            admin_comment = f"üí¨ {message.from_user.first_name}:\n{comment_text}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            for admin_id in ADMIN_IDS:
                try:
                    bot.send_message(admin_id, admin_comment)
                except:
                    pass
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            bot.send_message(SUPPORT_CHAT_ID, f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º")
            
        else:
            # –≠—Ç–æ –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            replied_id = message.reply_to_message.message_id
            
            if replied_id in message_to_user:
                user_id = message_to_user[replied_id]
                send_reply_to_user(user_id, message)
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                replied_text = message.reply_to_message.text or message.reply_to_message.caption or ""
                if "ID:" in replied_text:
                    match = re.search(r'ID:(\d+)', replied_text)
                    if match:
                        user_id = int(match.group(1))
                        send_reply_to_user(user_id, message)
                        
    except Exception as e:
        bot.send_message(SUPPORT_CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ // –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–±–µ–∑ —Ä–µ–ø–ª–∞—è)
@bot.message_handler(func=lambda m: m.chat.id == SUPPORT_CHAT_ID and m.text and m.text.startswith('//'))
def handle_direct_comment(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ // –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –±–µ–∑ —Ä–µ–ø–ª–∞—è"""
    try:
        # –≠—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
        comment_text = message.text[2:].strip()
        admin_comment = f"üí¨ {message.from_user.first_name}:\n{comment_text}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMIN_IDS:
            try:
                bot.send_message(admin_id, admin_comment)
            except:
                pass
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        bot.send_message(SUPPORT_CHAT_ID, f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º")
        
        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å // –∏–∑ –≥—Ä—É–ø–ø—ã
        try:
            bot.delete_message(SUPPORT_CHAT_ID, message.message_id)
        except:
            pass
            
    except Exception as e:
        bot.send_message(SUPPORT_CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞: {e}")

def send_reply_to_user(user_id, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        if message.text:
            bot.send_message(user_id, f"üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n{message.text}")
        elif message.photo:
            bot.send_photo(user_id, message.photo[-1].file_id, caption=message.caption)
        elif message.sticker:
            bot.send_sticker(user_id, message.sticker.file_id)
        elif message.voice:
            bot.send_voice(user_id, message.voice.file_id)
        elif message.audio:
            bot.send_audio(user_id, message.audio.file_id, caption=message.caption)
        elif message.document:
            bot.send_document(user_id, message.document.file_id, caption=message.caption)
        elif message.video:
            bot.send_video(user_id, message.video.file_id, caption=message.caption)
        
        bot.send_message(SUPPORT_CHAT_ID, f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        bot.send_message(SUPPORT_CHAT_ID, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –≥—Ä—É–ø–ø—ã
@bot.message_handler(func=lambda m: m.chat.type in ['group', 'supergroup'] and m.chat.id != SUPPORT_CHAT_ID)
def ignore_other_groups(message):
    pass

# ========== –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø –ü–ò–ù–ì–ê ==========
# –ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! –í—Ä–µ–º—è: " + datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

@app.route('/ping')
def ping():
    return "pong"

@app.route('/health')
def health():
    return "‚úÖ OK"

def run_web_server():
    app.run(host='0.0.0.0', port=5000)

# ========== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==========
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    web_thread = threading.Thread(target=run_web_server, daemon=True)
    web_thread.start()
    
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
    print("üí¨ –†–µ–∂–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ //—Ç–µ–∫—Å—Ç –¥–ª—è —Å–∫—Ä—ã—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("‚è∏Ô∏è AFK —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /afk #—Ç–µ–≥ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    print("üéµ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –º–µ–¥–∏–∞-—Ñ–æ—Ä–º–∞—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    
    bot.polling(none_stop=True)
